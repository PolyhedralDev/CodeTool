{
  parserClass="org.everbuild.terrascript.parsing.TerrascriptParser"
  extends="org.everbuild.terrascript.psi.TerrascriptPsiElementImpl"
  psiClassPrefix="Terrascript"
  psiImplClassSuffix="Impl"
  psiPackage="org.everbuild.terrascript.psi"
  psiImplPackage="org.everbuild.terrascript.psi.impl"
  psiImplUtilClass="org.everbuild.terrascript.psi.TerrascriptPsiUtil"
  elementTypeHolderClass="org.everbuild.terrascript.psi.TesfTypes"
  elementTypeClass="org.everbuild.terrascript.parsing.TerrascriptElementType"
  tokenTypeClass="org.everbuild.terrascript.parsing.TerrascriptTokenType"

  recoverWhile="!statement_recover"

  tokens = [
    IF = "if"
    ELSE = "else"
    WHILE = "while"
    FOR = "for"

    RETURN = "return"
    FAIL = "fail"
    BREAK = "break"
    CONTINUE = "continue"

    TRUE = "true"
    FALSE = "false"
    STR = "str"
    NUM = "num"
    BOOL = "bool"

    NUMBER = "regexp:[0-9]+(\.[0-9]+)?"
    STRING = "regexp:\"([^\"]|\\.)*\""
    ID = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"

    EQ = "="
    SEMICOLON = ";"
    COMMA = ","
    LPAREN = "("
    RPAREN = ")"
    LBRACE = "{"
    RBRACE = "}"

    L_AND = "&&"
    L_OR = "||"
    L_NOT = "!"
    PLUS = "+"
    MINUS = "-"
    MUL = "*"
    DIV = "/"
    MOD = "%"
    EQEQ = "=="
    NEQ = "!="
    LT = "<"
    GT = ">"
    LE = "<="
    GE = ">="

    COMMENT = "regexp://[^\r\n]*"
  ]
}

terrascriptFile ::= statement*

private meta statement_recover ::= !(LBRACE | RBRACE | SEMICOLON)

// Each of these is now a top-level statement, making them visible to the indexer.
statement ::=
    variable_declaration
    | id_assignment
    | expression_statement
    | conditional
    | while_loop
    | for_loop
    | control_flow_statement
    | COMMENT
    | SEMICOLON

// --- Statement Definitions ---
// The semicolon is now consumed inside the rule that needs it.
variable_declaration ::= vartype ID assignment? SEMICOLON {
    mixin="org.everbuild.terrascript.psi.TerrascriptNamedElementImpl"
    implements="org.everbuild.terrascript.psi.TerrascriptNamedElement"
    methods=[getName setName getNameIdentifier]
    pin=2
}

id_assignment ::= variable_usage EQ expression SEMICOLON {pin=2}
expression_statement ::= expression SEMICOLON
control_flow_statement ::= (RETURN | FAIL | BREAK | CONTINUE) SEMICOLON
assignment ::= EQ expression

block ::= (LBRACE statement* RBRACE) | statement

conditional ::= if_statement (ELSE if_statement)* else_block?
if_statement ::= IF LPAREN expression RPAREN block
else_block ::= ELSE block

while_loop ::= WHILE LPAREN expression RPAREN block
for_loop ::= FOR LPAREN for_initializer? SEMICOLON expression? SEMICOLON for_update? RPAREN block

private for_initializer ::= variable_declaration | expression
private for_update ::= id_assignment | expression

// --- Expressions ---
expression ::= logical_or_expression
private logical_or_expression ::= logical_and_expression (L_OR logical_and_expression)*
private logical_and_expression ::= equality_expression (L_AND equality_expression)*
private equality_expression ::= relational_expression ((EQEQ | NEQ) relational_expression)*
private relational_expression ::= additive_expression ((LT | GT | LE | GE) additive_expression)*
private additive_expression ::= multiplicative_expression ((PLUS | MINUS) multiplicative_expression)*
private multiplicative_expression ::= unary_expression ((MUL | DIV | MOD) unary_expression)*

private unary_expression ::= (MINUS | L_NOT) unary_expression | call_or_primary_expression
private call_or_primary_expression ::= call_expression | primary_expression

call_expression ::= ID LPAREN argument_list? RPAREN {
    extends="TerrascriptDocumentedElementImpl"
}
private primary_expression ::= literal | variable_usage | LPAREN expression RPAREN

variable_usage ::= ID {
    extends="TerrascriptVariableUsageElementImpl"
}

argument_list ::= expression (COMMA expression)*
literal ::= NUMBER | STRING | TRUE | FALSE
vartype ::= STR | NUM | BOOL
